!pip install pyspark

!pip install findspark


import pyspark
from pyspark.sql import SparkSession
import findspark
findspark.init()
spark = SparkSession.builder.appName("IPL_Analysis").getOrCreate()
!pip install pandas
!pip install matplotlib seaborn
ipl_data_path = "/content/matches.csv"  # Update with your file path
ipl_df = spark.read.csv(ipl_data_path, header=True, inferSchema=True)
ipl_df.show()
ipl_df.printSchema()
ipl_df.show(5)
ipl_df.printSchema()
ipl_df.describe().show()
ipl_df.groupBy("season").count().orderBy("season").show()
ipl_df.groupBy("winner").count().orderBy("count", ascending=False).show()
ipl_df.groupBy("player_of_match").count().orderBy("count", ascending=False).show(10)
ipl_df.groupBy("player_of_match").count().orderBy("count", ascending=False).show(10)
ipl_df.createOrReplaceTempView("ipl_table")
spark.sql("""
    SELECT winner, COUNT(*) AS wins
    FROM ipl_table
    WHERE winner IS NOT NULL
    GROUP BY winner
    ORDER BY wins DESC
""").show()
spark.sql("""
    SELECT venue, COUNT(*) AS matches
    FROM ipl_table
    GROUP BY venue
    ORDER BY matches DESC
""").show()
import pandas as pd
import matplotlib.pyplot as plt

season_data = ipl_df.groupBy("season").count().toPandas()
season_data.plot(kind="bar", x="season", y="count", legend=False)
plt.title("Matches Played Each Season")
plt.xlabel("Season")
plt.ylabel("Number of Matches")
plt.show()
player_data = ipl_df.groupBy("player_of_match").count().orderBy("count", ascending=False).limit(10).toPandas()
player_data.plot(kind="barh", x="player_of_match", y="count", legend=False)
plt.title("Top 10 Player of the Match Awards")
plt.xlabel("Number of Awards")
plt.ylabel("Player")
plt.show()
performance_df = ipl_df.groupBy("season", "winner").count()
performance_df.orderBy("season").show()
import matplotlib.pyplot as plt

# Assuming 'performance_df' is already defined as in your previous code
toss_impact_df = ipl_df.groupBy("toss_decision", "winner").count()
toss_impact_df.show()

performance_pandas = performance_df.toPandas()

# Plotting the time series data
plt.figure(figsize=(12, 6))
for winner in performance_pandas['winner'].unique():
    winner_data = performance_pandas[performance_pandas['winner'] == winner]
    plt.plot(winner_data['season'], winner_data['count'], label=winner, marker='o')

plt.xlabel('Season')
plt.ylabel('Number of Wins')
plt.title('Team Performance Over Time')
plt.xticks(performance_pandas['season'].unique())  # Ensure all seasons are shown on x-axis
plt.legend(loc="center left")
plt.grid(True)
plt.show()
